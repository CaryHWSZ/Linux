###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.30.2.51295/W32 for ARM     28/Dec/2014  20:59:03 #
# Copyright 1999-2009 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    uCOS-II\Source\os_time.c                                 #
#    Command line =  C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    uCOS-II\Source\os_time.c -lCN                            #
#                    C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\Flash\List\ -o   #
#                    C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\Flash\Obj\       #
#                    --no_unroll --no_inline --no_tbaa --no_scheduling        #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "F:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.4\arm\INC\DLib_Config_Norma #
#                    l.h" -I C:\Users\Administrator\Desktop\uCOS-II\Micrium\S #
#                    oftware\EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\ -I      #
#                    C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\..\BSP\ -I       #
#                    C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\..\..\..\..\..\C #
#                    PU\ST\STM32\inc\ -I C:\Users\Administrator\Desktop\uCOS- #
#                    II\Micrium\Software\EvalBoards\ST\STM32-SK\IAR\OS-Probe- #
#                    LCD\..\..\..\..\..\uC-CPU\ -I                            #
#                    C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\..\..\..\..\..\u #
#                    C-CPU\ARM-Cortex-M3\IAR\ -I                              #
#                    C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\..\..\..\..\..\u #
#                    C-LCD\Source\ -I C:\Users\Administrator\Desktop\uCOS-II\ #
#                    Micrium\Software\EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD #
#                    \..\..\..\..\..\uC-LIB\ -I C:\Users\Administrator\Deskto #
#                    p\uCOS-II\Micrium\Software\EvalBoards\ST\STM32-SK\IAR\OS #
#                    -Probe-LCD\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex-M3\Ge #
#                    neric\IAR\ -I C:\Users\Administrator\Desktop\uCOS-II\Mic #
#                    rium\Software\EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\.. #
#                    \..\..\..\..\uCOS-II\Source\ -I                          #
#                    C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\..\..\..\..\..\u #
#                    C-Probe\Target\Communication\Generic\RS-232\Source\ -I   #
#                    C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\..\..\..\..\..\u #
#                    C-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM #
#                    32\ -I C:\Users\Administrator\Desktop\uCOS-II\Micrium\So #
#                    ftware\EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\..\..\..\ #
#                    ..\..\uC-Probe\Target\Communication\Generic\Source\ -I   #
#                    C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\..\..\..\..\..\u #
#                    C-Probe\Target\Plugins\uCOS-II\ -I "F:\Program Files     #
#                    (x86)\IAR Systems\Embedded Workbench 5.4\arm\INC\" -Om   #
#    List file    =  C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\Flash\List\os_ti #
#                    me.lst                                                   #
#    Object file  =  C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\ #
#                    EvalBoards\ST\STM32-SK\IAR\OS-Probe-LCD\Flash\Obj\os_tim #
#                    e.o                                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\uCOS-II\Micrium\Software\uCOS-II\Source\os_time.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                             TIME MANAGEMENT
      6          *
      7          *                              (c) Copyright 1992-2007, Micrium, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_TIME.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.86
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.  
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license 
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience 
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a 
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #ifndef  OS_MASTER_FILE
     25          #include <ucos_ii.h>
     26          #endif
     27          
     28          /*
     29          *********************************************************************************************************
     30          *                                DELAY TASK 'n' TICKS   (n from 0 to 65535)
     31          *
     32          * Description: This function is called to delay execution of the currently running task until the
     33          *              specified number of system ticks expires.  This, of course, directly equates to delaying
     34          *              the current task for some time to expire.  No delay will result If the specified delay is
     35          *              0.  If the specified delay is greater than 0 then, a context switch will result.
     36          *
     37          * Arguments  : ticks     is the time delay that the task will be suspended in number of clock 'ticks'.
     38          *                        Note that by specifying 0, the task will not be delayed.
     39          *
     40          * Returns    : none
     41          *********************************************************************************************************
     42          */
     43          

   \                                 In section .text, align 4, keep-with-next
     44          void  OSTimeDly (INT16U ticks)
     45          {
   \                     OSTimeDly:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0446               MOV      R4,R0
     46              INT8U      y;
     47          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
     48              OS_CPU_SR  cpu_sr = 0;
     49          #endif
     50          
     51          
     52          
     53              if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   \   00000004   ....               LDR.N    R0,??DataTable3  ;; OSIntNesting
   \   00000006   0078               LDRB     R0,[R0, #+0]
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   1AD1               BNE.N    ??OSTimeDly_0
     54                  return;
     55              }
     56              if (ticks > 0) {                             /* 0 means no delay!                                  */
   \   0000000C   002C               CMP      R4,#+0
   \   0000000E   18D0               BEQ.N    ??OSTimeDly_0
     57                  OS_ENTER_CRITICAL();
   \   00000010   ........           BL       OS_CPU_SR_Save
     58                  y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   \   00000014   0B49               LDR.N    R1,??OSTimeDly_1  ;; OSTCBCur
   \   00000016   0968               LDR      R1,[R1, #+0]
   \   00000018   01F12E02           ADD      R2,R1,#+46
   \   0000001C   9379               LDRB     R3,[R2, #+6]
     59                  OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   \   0000001E   ....               LDR.N    R5,??DataTable5  ;; OSRdyTbl
   \   00000020   5E5D               LDRB     R6,[R3, R5]
   \   00000022   D779               LDRB     R7,[R2, #+7]
   \   00000024   FF43               MVNS     R7,R7
   \   00000026   3E40               ANDS     R6,R7,R6
   \   00000028   5E55               STRB     R6,[R3, R5]
     60                  if (OSRdyTbl[y] == 0) {
   \   0000002A   05D1               BNE.N    ??OSTimeDly_2
     61                      OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   \   0000002C   ....               LDR.N    R3,??DataTable4  ;; OSRdyGrp
   \   0000002E   1D78               LDRB     R5,[R3, #+0]
   \   00000030   127A               LDRB     R2,[R2, #+8]
   \   00000032   D243               MVNS     R2,R2
   \   00000034   2A40               ANDS     R2,R2,R5
   \   00000036   1A70               STRB     R2,[R3, #+0]
     62                  }
     63                  OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   \                     ??OSTimeDly_2:
   \   00000038   CC85               STRH     R4,[R1, #+46]
     64                  OS_EXIT_CRITICAL();
   \   0000003A   ........           BL       OS_CPU_SR_Restore
     65                  OS_Sched();                              /* Find next task to run!                             */
   \   0000003E   ........           BL       OS_Sched
   \                     ??OSTimeDly_0:
   \   00000042   F1BD               POP      {R0,R4-R7,PC}    ;; return
   \                     ??OSTimeDly_1:
   \   00000044   ........           DC32     OSTCBCur
     66              }
     67          }
     68          /*$PAGE*/
     69          /*
     70          *********************************************************************************************************
     71          *                                     DELAY TASK FOR SPECIFIED TIME
     72          *
     73          * Description: This function is called to delay execution of the currently running task until some time
     74          *              expires.  This call allows you to specify the delay time in HOURS, MINUTES, SECONDS and
     75          *              MILLISECONDS instead of ticks.
     76          *
     77          * Arguments  : hours     specifies the number of hours that the task will be delayed (max. is 255)
     78          *              minutes   specifies the number of minutes (max. 59)
     79          *              seconds   specifies the number of seconds (max. 59)
     80          *              milli     specifies the number of milliseconds (max. 999)
     81          *
     82          * Returns    : OS_ERR_NONE
     83          *              OS_ERR_TIME_INVALID_MINUTES
     84          *              OS_ERR_TIME_INVALID_SECONDS
     85          *              OS_ERR_TIME_INVALID_MS
     86          *              OS_ERR_TIME_ZERO_DLY
     87          *              OS_ERR_TIME_DLY_ISR
     88          *
     89          * Note(s)    : The resolution on the milliseconds depends on the tick rate.  For example, you can't do
     90          *              a 10 mS delay if the ticker interrupts every 100 mS.  In this case, the delay would be
     91          *              set to 0.  The actual delay is rounded to the nearest tick.
     92          *********************************************************************************************************
     93          */
     94          
     95          #if OS_TIME_DLY_HMSM_EN > 0

   \                                 In section .text, align 2, keep-with-next
     96          INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
     97          {
   \                     OSTimeDlyHMSM:
   \   00000000   70B5               PUSH     {R4-R6,LR}
     98              INT32U ticks;
     99              INT16U loops;
    100          
    101          
    102              if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   \   00000002   ....               LDR.N    R4,??DataTable3  ;; OSIntNesting
   \   00000004   2478               LDRB     R4,[R4, #+0]
   \   00000006   002C               CMP      R4,#+0
   \   00000008   01D0               BEQ.N    ??OSTimeDlyHMSM_0
    103                  return (OS_ERR_TIME_DLY_ISR);
   \   0000000A   5520               MOVS     R0,#+85
   \   0000000C   70BD               POP      {R4-R6,PC}
    104              }
    105          #if OS_ARG_CHK_EN > 0
    106              if (hours == 0) {
    107                  if (minutes == 0) {
    108                      if (seconds == 0) {
   \                     ??OSTimeDlyHMSM_0:
   \   0000000E   41EA0004           ORR      R4,R1,R0
   \   00000012   1443               ORRS     R4,R2,R4
   \   00000014   03D1               BNE.N    ??OSTimeDlyHMSM_1
    109                          if (ms == 0) {
   \   00000016   002B               CMP      R3,#+0
   \   00000018   01D1               BNE.N    ??OSTimeDlyHMSM_1
    110                              return (OS_ERR_TIME_ZERO_DLY);
   \   0000001A   5420               MOVS     R0,#+84
   \   0000001C   70BD               POP      {R4-R6,PC}
    111                          }
    112                      }
    113                  }
    114              }
    115              if (minutes > 59) {
   \                     ??OSTimeDlyHMSM_1:
   \   0000001E   3C29               CMP      R1,#+60
   \   00000020   01D3               BCC.N    ??OSTimeDlyHMSM_2
    116                  return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   \   00000022   5120               MOVS     R0,#+81
   \   00000024   70BD               POP      {R4-R6,PC}
    117              }
    118              if (seconds > 59) {
   \                     ??OSTimeDlyHMSM_2:
   \   00000026   3C2A               CMP      R2,#+60
   \   00000028   01D3               BCC.N    ??OSTimeDlyHMSM_3
    119                  return (OS_ERR_TIME_INVALID_SECONDS);
   \   0000002A   5220               MOVS     R0,#+82
   \   0000002C   70BD               POP      {R4-R6,PC}
    120              }
    121              if (ms > 999) {
   \                     ??OSTimeDlyHMSM_3:
   \   0000002E   4FF47A74           MOV      R4,#+1000
   \   00000032   A342               CMP      R3,R4
   \   00000034   01D3               BCC.N    ??OSTimeDlyHMSM_4
    122                  return (OS_ERR_TIME_INVALID_MS);
   \   00000036   5320               MOVS     R0,#+83
   \   00000038   70BD               POP      {R4-R6,PC}
    123              }
    124          #endif
    125                                                           /* Compute the total number of clock ticks required.. */
    126                                                           /* .. (rounded to the nearest tick)                   */
    127              ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    128                    + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   \                     ??OSTimeDlyHMSM_4:
   \   0000003A   4FF46165           MOV      R5,#+3600
   \   0000003E   3C26               MOVS     R6,#+60
   \   00000040   7143               MULS     R1,R1,R6
   \   00000042   00FB0510           MLA      R0,R0,R5,R1
   \   00000046   1018               ADDS     R0,R2,R0
   \   00000048   03FB04F1           MUL      R1,R3,R4
   \   0000004C   B1FBF4F1           UDIV     R1,R1,R4
   \   00000050   00FB0410           MLA      R0,R0,R4,R1
    129              loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   \   00000054   040C               LSRS     R4,R0,#+16
    130              ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    131              OSTimeDly((INT16U)ticks);
   \   00000056   80B2               UXTH     R0,R0
   \   00000058   ........           BL       OSTimeDly
   \   0000005C   09E0               B.N      ??OSTimeDlyHMSM_5
    132              while (loops > 0) {
    133                  OSTimeDly((INT16U)32768u);
   \                     ??OSTimeDlyHMSM_6:
   \   0000005E   4FF40040           MOV      R0,#+32768
   \   00000062   ........           BL       OSTimeDly
    134                  OSTimeDly((INT16U)32768u);
   \   00000066   4FF40040           MOV      R0,#+32768
   \   0000006A   ........           BL       OSTimeDly
    135                  loops--;
   \   0000006E   641E               SUBS     R4,R4,#+1
   \   00000070   A4B2               UXTH     R4,R4
    136              }
   \                     ??OSTimeDlyHMSM_5:
   \   00000072   2000               MOVS     R0,R4
   \   00000074   F3D1               BNE.N    ??OSTimeDlyHMSM_6
    137              return (OS_ERR_NONE);
   \   00000076   0020               MOVS     R0,#+0
   \   00000078   70BD               POP      {R4-R6,PC}       ;; return
    138          }
    139          #endif
    140          /*$PAGE*/
    141          /*
    142          *********************************************************************************************************
    143          *                                         RESUME A DELAYED TASK
    144          *
    145          * Description: This function is used resume a task that has been delayed through a call to either
    146          *              OSTimeDly() or OSTimeDlyHMSM().  Note that you can call this function to resume a
    147          *              task that is waiting for an event with timeout.  This would make the task look
    148          *              like a timeout occurred.
    149          *
    150          *              Also, you cannot resume a task that has called OSTimeDlyHMSM() with a combined time that
    151          *              exceeds 65535 clock ticks.  In other words, if the clock tick runs at 100 Hz then, you will
    152          *              not be able to resume a delayed task that called OSTimeDlyHMSM(0, 10, 55, 350) or higher:
    153          *
    154          *                  (10 Minutes * 60 + 55 Seconds + 0.35) * 100 ticks/second.
    155          *
    156          * Arguments  : prio                      specifies the priority of the task to resume
    157          *
    158          * Returns    : OS_ERR_NONE               Task has been resumed
    159          *              OS_ERR_PRIO_INVALID       if the priority you specify is higher that the maximum allowed
    160          *                                        (i.e. >= OS_LOWEST_PRIO)
    161          *              OS_ERR_TIME_NOT_DLY       Task is not waiting for time to expire
    162          *              OS_ERR_TASK_NOT_EXIST     The desired task has not been created or has been assigned to a Mutex.
    163          *********************************************************************************************************
    164          */
    165          
    166          #if OS_TIME_DLY_RESUME_EN > 0

   \                                 In section .text, align 4, keep-with-next
    167          INT8U  OSTimeDlyResume (INT8U prio)
    168          {
   \                     OSTimeDlyResume:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0446               MOV      R4,R0
    169              OS_TCB    *ptcb;
    170          #if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    171              OS_CPU_SR  cpu_sr = 0;
    172          #endif
    173          
    174          
    175          
    176              if (prio >= OS_LOWEST_PRIO) {
   \   00000004   1F2C               CMP      R4,#+31
   \   00000006   01D3               BCC.N    ??OSTimeDlyResume_0
    177                  return (OS_ERR_PRIO_INVALID);
   \   00000008   2A20               MOVS     R0,#+42
   \   0000000A   10BD               POP      {R4,PC}
    178              }
    179              OS_ENTER_CRITICAL();
   \                     ??OSTimeDlyResume_0:
   \   0000000C   ........           BL       OS_CPU_SR_Save
    180              ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   \   00000010   1D49               LDR.N    R1,??OSTimeDlyResume_1  ;; OSTCBPrioTbl
   \   00000012   51F82410           LDR      R1,[R1, R4, LSL #+2]
    181              if (ptcb == (OS_TCB *)0) {
   \   00000016   0029               CMP      R1,#+0
   \   00000018   03D1               BNE.N    ??OSTimeDlyResume_2
    182                  OS_EXIT_CRITICAL();
   \                     ??OSTimeDlyResume_3:
   \   0000001A   ........           BL       OS_CPU_SR_Restore
    183                  return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   \   0000001E   4320               MOVS     R0,#+67
   \   00000020   10BD               POP      {R4,PC}
    184              }
    185              if (ptcb == OS_TCB_RESERVED) {
   \                     ??OSTimeDlyResume_2:
   \   00000022   0129               CMP      R1,#+1
   \   00000024   F9D0               BEQ.N    ??OSTimeDlyResume_3
    186                  OS_EXIT_CRITICAL();
    187                  return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    188              }
    189              if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   \   00000026   CA8D               LDRH     R2,[R1, #+46]
   \   00000028   002A               CMP      R2,#+0
   \   0000002A   03D1               BNE.N    ??OSTimeDlyResume_4
    190                  OS_EXIT_CRITICAL();
   \   0000002C   ........           BL       OS_CPU_SR_Restore
    191                  return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   \   00000030   5020               MOVS     R0,#+80
   \   00000032   10BD               POP      {R4,PC}
    192              }
    193          
    194              ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   \                     ??OSTimeDlyResume_4:
   \   00000034   0022               MOVS     R2,#+0
   \   00000036   CA85               STRH     R2,[R1, #+46]
    195              if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   \   00000038   2E31               ADDS     R1,R1,#+46
   \   0000003A   8A78               LDRB     R2,[R1, #+2]
   \   0000003C   32F0C802           BICS     R2,R2,#0xC8
   \   00000040   06D0               BEQ.N    ??OSTimeDlyResume_5
    196                  ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   \   00000042   8A78               LDRB     R2,[R1, #+2]
   \   00000044   22F03702           BIC      R2,R2,#0x37
   \   00000048   8A70               STRB     R2,[R1, #+2]
    197                  ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   \   0000004A   0122               MOVS     R2,#+1
   \   0000004C   CA70               STRB     R2,[R1, #+3]
   \   0000004E   01E0               B.N      ??OSTimeDlyResume_6
    198              } else {
    199                  ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   \                     ??OSTimeDlyResume_5:
   \   00000050   0022               MOVS     R2,#+0
   \   00000052   CA70               STRB     R2,[R1, #+3]
    200              }
    201              if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   \                     ??OSTimeDlyResume_6:
   \   00000054   8A78               LDRB     R2,[R1, #+2]
   \   00000056   12F0080F           TST      R2,#0x8
   \   0000005A   10D1               BNE.N    ??OSTimeDlyResume_7
    202                  OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   \   0000005C   ....               LDR.N    R2,??DataTable4  ;; OSRdyGrp
   \   0000005E   1378               LDRB     R3,[R2, #+0]
   \   00000060   0C7A               LDRB     R4,[R1, #+8]
   \   00000062   2343               ORRS     R3,R4,R3
   \   00000064   1370               STRB     R3,[R2, #+0]
    203                  OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   \   00000066   ....               LDR.N    R2,??DataTable5  ;; OSRdyTbl
   \   00000068   8B79               LDRB     R3,[R1, #+6]
   \   0000006A   9B5C               LDRB     R3,[R3, R2]
   \   0000006C   CC79               LDRB     R4,[R1, #+7]
   \   0000006E   2343               ORRS     R3,R4,R3
   \   00000070   8979               LDRB     R1,[R1, #+6]
   \   00000072   8B54               STRB     R3,[R1, R2]
    204                  OS_EXIT_CRITICAL();
   \   00000074   ........           BL       OS_CPU_SR_Restore
    205                  OS_Sched();                                            /* See if this is new highest priority  */
   \   00000078   ........           BL       OS_Sched
   \   0000007C   01E0               B.N      ??OSTimeDlyResume_8
    206              } else {
    207                  OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
   \                     ??OSTimeDlyResume_7:
   \   0000007E   ........           BL       OS_CPU_SR_Restore
    208              }
    209              return (OS_ERR_NONE);
   \                     ??OSTimeDlyResume_8:
   \   00000082   0020               MOVS     R0,#+0
   \   00000084   10BD               POP      {R4,PC}          ;; return
   \   00000086   00BF               Nop      
   \                     ??OSTimeDlyResume_1:
   \   00000088   ........           DC32     OSTCBPrioTbl
    210          }
    211          #endif
    212          /*$PAGE*/
    213          /*
    214          *********************************************************************************************************
    215          *                                         GET CURRENT SYSTEM TIME
    216          *
    217          * Description: This function is used by your application to obtain the current value of the 32-bit
    218          *              counter which keeps track of the number of clock ticks.
    219          *
    220          * Arguments  : none
    221          *
    222          * Returns    : The current value of OSTime
    223          *********************************************************************************************************
    224          */
    225          
    226          #if OS_TIME_GET_SET_EN > 0

   \                                 In section .text, align 2, keep-with-next
    227          INT32U  OSTimeGet (void)
    228          {
   \                     OSTimeGet:
   \   00000000   10B5               PUSH     {R4,LR}
    229              INT32U     ticks;
    230          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    231              OS_CPU_SR  cpu_sr = 0;
    232          #endif
    233          
    234          
    235          
    236              OS_ENTER_CRITICAL();
   \   00000002   ........           BL       OS_CPU_SR_Save
    237              ticks = OSTime;
   \   00000006   ....               LDR.N    R1,??DataTable7  ;; OSTime
   \   00000008   0C68               LDR      R4,[R1, #+0]
    238              OS_EXIT_CRITICAL();
   \   0000000A   ........           BL       OS_CPU_SR_Restore
    239              return (ticks);
   \   0000000E   2046               MOV      R0,R4
   \   00000010   10BD               POP      {R4,PC}          ;; return
    240          }
    241          #endif
    242          
    243          /*
    244          *********************************************************************************************************
    245          *                                            SET SYSTEM CLOCK
    246          *
    247          * Description: This function sets the 32-bit counter which keeps track of the number of clock ticks.
    248          *
    249          * Arguments  : ticks      specifies the new value that OSTime needs to take.
    250          *
    251          * Returns    : none
    252          *********************************************************************************************************
    253          */
    254          
    255          #if OS_TIME_GET_SET_EN > 0

   \                                 In section .text, align 2, keep-with-next
    256          void  OSTimeSet (INT32U ticks)
    257          {
   \                     OSTimeSet:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0446               MOV      R4,R0
    258          #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    259              OS_CPU_SR  cpu_sr = 0;
    260          #endif
    261          
    262          
    263          
    264              OS_ENTER_CRITICAL();
   \   00000004   ........           BL       OS_CPU_SR_Save
    265              OSTime = ticks;
   \   00000008   ....               LDR.N    R1,??DataTable7  ;; OSTime
   \   0000000A   0C60               STR      R4,[R1, #+0]
    266              OS_EXIT_CRITICAL();
   \   0000000C   BDE81040           POP      {R4,LR}
   \   00000010   ........           B.W      OS_CPU_SR_Restore
    267          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     OSRdyGrp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     OSRdyTbl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     OSTime
    268          #endif

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     OSTimeDly           24
     OSTimeDlyHMSM       16
     OSTimeDlyResume      8
     OSTimeGet            8
     OSTimeSet            8


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     OSTimeDly         72
     OSTimeDlyHMSM    122
     OSTimeDlyResume  140
     OSTimeGet         18
     OSTimeSet         20
     ??DataTable3       4
     ??DataTable4       4
     ??DataTable5       4
     ??DataTable7       4

 
 388 bytes in section .text
 
 388 bytes of CODE memory

Errors: none
Warnings: none
